"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const views_1 = require("../views");
class ChatButtons {
    /**
     * Inits chat buttons.
     * @param options
     */
    constructor(options) {
        this.options = options;
        this.callbacks = {};
        /**
         * A middleware for express server.
         */
        this.middleware = (req, res, next) => {
            const { data, threadId } = req.query;
            const beingPrefetched = utils_1.isBeingPrefetched(req);
            // Decode data and parse it to JSON
            const decoded = decodeURIComponent(data);
            const btn = JSON.parse(decoded);
            // If link is being prefetched, then
            // render a html page with meta tags
            // e.g. <meta property="og:title" value="Button title" />
            if (beingPrefetched) {
                res.send(views_1.prefetchView(btn));
            }
            // If link isn't being prefetched, then it counts as a click, so
            // it will trigger callback and render a html page with js code that closes tab.
            else {
                res.send(views_1.clickView(threadId));
                const callback = this.callbacks[btn.id];
                if (callback != null) {
                    callback(btn, threadId);
                }
            }
            next();
        };
        this.options.path = this.options.path || '/callback';
        // Apply the middleware.
        options.app.use(options.path, this.middleware);
    }
    setApi(api) {
        this.options.api = api;
    }
    /**
     * Sends a button.
     */
    send(btn, threadId, metadata) {
        return new Promise((resolve) => {
            const { endpoint, api } = this.options;
            // If button hasn't got an id, then set a random one.
            btn.id = btn.id || utils_1.generateHash(8);
            // Set meta data
            if (metadata != null) {
                btn.metadata = Object.assign({}, btn.metadata || {}, metadata);
            }
            // Generate a callback url.
            const url = utils_1.generateUrl(endpoint, btn, threadId);
            // Store button callback in memory.
            this.attachCallback(btn);
            // Send button.
            api.sendMessage({ url }, threadId, (err, info) => {
                resolve(info);
            });
        });
    }
    /**
     * Stores button callback in memory, so it can be triggered later.
     */
    attachCallback(btn) {
        const { id } = btn;
        if (this.callbacks[id] == null) {
            this.callbacks[id] = btn.onClick;
        }
    }
}
exports.ChatButtons = ChatButtons;
